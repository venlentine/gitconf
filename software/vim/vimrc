"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Author: Venlentine
" Date: 2015-07-26
" $yum install vim
" cd ~
" wget -O .vimrc https://github.com/venlentine/gitconf/raw/master/software/vim/vimrc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:iswindows = 0
let g:islinux = 0
let g:isGUI = 0
if(has("win32") || has("win64") || has("win95") || has("win16"))
	let g:iswindows = 1
else
    let g:islinux = 1
endif
if has("gui_running")
    let g:isGUI = 1
else
    let g:isGUI = 0
endif

set nocompatible	"关掉兼容模式
set history=700
filetype on
if has("eval") && v:version>=600
    filetype plugin on
    filetype indent on
endif
if exists("&autoread")
    set autoread
endif
if exists("&mouse")
    set mouse=a
endif
set helplang=cn
if has('autocmd')
	" clear all autocommands! (this comment must be on its own line)
	autocmd!
endif
set viminfo='10,"100,:20,%,n~/.viminfo
"set autochdir                   		" 自动切换当前目录为当前文件所在的目录
set showcmd                     		" 右下角显示一个完整的命令已经完成的部分
"set list                        		" 制表符成为可见
"set listchars=tab:»·,nbsp:·,trail:·	" but only show tabs and trailing whitespace
set report=0                    		" report back on all changes
set shortmess=atI               		" shorten messages and don't show intro
set more 								" use more prompt
set noautowrite 						" 不自动保存文件
set showmode							" 打开显示模式的开关
set ttyfast
set undolevels=1000           			" 1000 undos
set updatecount=100           			" switch every 100 chars
set complete=.,w,b,u,U,t,i,d  			" do lots of scanning on tab completion
set dy=lastline		            		" 显示最多行，不用@@
set completeopt=menu,longest,preview 	" more autocomplete <Ctrl>-P options
set nostartofline               		" leave my cursor position alone!
set textwidth=80                		" 格式化文本,自动调节到适应当前窗口的大小
set diffopt=filler,iwhite       		" ignore all whitespace and sync
set formatoptions=tcrql         		" t - autowrap to textwidth
										" c - autowrap comments to textwidth
										" r - autoinsert comment leader with <Enter>
										" q - allow formatting of comments with :gq
										" l - don't format already long lines
let maplocalleader=','        			" all my macros start with ,
let mapleader = ","
let g:mapleader = ","
nmap <leader>wa :xa!<CR> 	" 设置快速保存
nmap <leader>w :w!<cr>		" 快速保存
nmap <leader>wq :wq!<CR> 	" 快速退出(保存)
nmap <leader>q :q!<cr>		" 快速退出(不保存)
map <leader>e :e! D:/vim/_vimrc<cr>	" Fast reloading of the .vimrc ( ~/.vimrc<cr> )
map <leader>eh :e! D:/vim/gvim_help.txt<cr>
autocmd! bufwritepost _vimrc source D:/vim/_vimrc	" When .vimrc is edited, reload it
let performance_mode=0		" turn off nice effect on status bar title
let use_plugins_i_donot_use=0
map <space> /	" Map space to / (search) and c-space to ? (backgwards search)
map <silent> <leader>nh :noh<cr>	" 清除高亮
map <leader>bc :Bclose<cr>	" Close the current buffer
map <leader>ba :1,300 Bclose!<cr> " Close all the buffers
map <leader>bn :bn<cr>	" Use the arrows to something usefull
map <leader>bp :bp<cr>

command! BcloseOthers call <SID>BufCloseOthers()
function! <SID>BufCloseOthers()
   let l:currentBufNum   = bufnr("%")
   let l:alternateBufNum = bufnr("#")
   for i in range(1,bufnr("$"))
     if buflisted(i)
       if i!=l:currentBufNum
         execute("bdelete ".i)
       endif
     endif
   endfor
endfunction
map <leader>bo :BcloseOthers<cr>

" Tab configuration
map <leader>tn :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>tp :tabprevious<cr>
map <leader>tnx :tabnext<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Parenthesis/bracket expanding
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
vnoremap $1 <esc>`>a)<esc>`<i(<esc>
vnoremap $2 <esc>`>a]<esc>`<i[<esc>
vnoremap $3 <esc>`>a}<esc>`<i{<esc>
vnoremap $$ <esc>`>a"<esc>`<i"<esc>
vnoremap $q <esc>`>a'<esc>`<i'<esc>
vnoremap $e <esc>`>a"<esc>`<i"<esc>

" Map auto complete of (, ", ', [
inoremap $1 ()<esc>i
inoremap $2 []<esc>i
inoremap $3 {}<esc>i
inoremap $4 {<esc>o}<esc>O
inoremap $q ''<esc>i
inoremap $e ""<esc>i
inoremap $t <><esc>i

"Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
nmap <M-k> mz:m-2<cr>`z
nmap <M-j> mz:m+<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

if g:islinux
  nmap <D-j> <M-j>
  nmap <D-k> <M-k>
  vmap <D-j> <M-j>
  vmap <D-k> <M-k>
endif

" CTRL-S保存
noremap <C-S> :update<CR>
vnoremap <C-S> <C-C>:update<CR>
inoremap <C-S> <C-O>:update<CR>

" CTRL-Z取消
noremap <C-Z> u
inoremap <C-Z> <C-O>:u

" CTRL-Y重做
"noremap <C-Y> <C-R> 
"inoremap <C-Y> <C-O><C-R>

" CTRL-A is Select all
" noremap <C-A> gggH<C-O>G
" inoremap <C-A> <C-O>gg<C-O>gH<C-O>G
" cnoremap <C-A> <C-C>gggH<C-O>G
" onoremap <C-A> <C-C>gggH<C-O>G
" snoremap <C-A> <C-C>gggH<C-O>G
" xnoremap <C-A> <C-C>ggVG

" CTRL-Tab is Next window
noremap <C-Tab> <C-W>w
inoremap <C-Tab> <C-O><C-W>w
cnoremap <C-Tab> <C-C><C-W>w
" onoremap <C-Tab> <C-C><C-W>w

" CTRL-F4 is Close window
" noremap <C-F4> <C-W>c
" inoremap <C-F4> <C-O><C-W>c
" cnoremap <C-F4> <C-C><C-W>c
" onoremap <C-F4> <C-C><C-W>c

" Do :help cope if you are unsure what cope is. It's super useful!
map <leader>cc :botright cope<cr>
map <leader>cn :cn<cr>
map <leader>cp :cp<cr>

"Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

"Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

map <Leader>1 :set syntax=java<CR>
map <Leader>2 :set syntax=c<CR>
map <Leader>3 :set syntax=xhtml<CR>
map <Leader>4 :set syntax=python<CR>
map <Leader>5 :set ft=javascript<CR>
map <Leader>0 :syntax sync fromstart<CR>

"noremap <leader>m :%s/\r//g<CR> "清除换行符
noremap <Leader>cm mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

"Quickly open a buffer for scripbble
map <leader>b :e ~/buffer<cr>
autocmd BufRead,BufNewFile ~/buffer iab <buffer> xh1 ===========================================

map <leader>pp :setlocal paste!<cr>

"设置 'omnifunc' 选项。如：
if has("autocmd")
    autocmd Filetype java setlocal omnifunc=javacomplete#Complete
endif
 
"Paste toggle - when pasting something in, don't indent.
"set pastetoggle=<F3>
 
"移除空行的缩进
map <leader>cs :%s/s*$//g<cr>:noh<cr>''
 
"列出剪贴板内容
imap <F3> <c-o>:reg<cr>

"Super paste
" ino <C-v> <esc>:set paste<cr>mui<C-R>+<esc>mv'uV'v=:set nopaste<cr>

" (1) 使 x d y 自动返回插入模式
" vnoremap y "ryi
" vnoremap x "rxi
" vnoremap d di
" (2) 普通模式和插入模式下均可按 粘贴
" imap :if col(".")!=1 exe 'normal "rp' else exe 'normal "rP' endif
" nmap "rP
" (3) 普通模式和插入模式下均可按 进入可视模式
" imap :if col(".")!=1 exe 'normal lv' else exe 'normal v' endif
" nmap v

set scrolloff=7
set wildmenu
set ruler
set cmdheight=2
set hidden
set number
set lazyredraw
"set nolazyredraw 	"Don't redraw while executing macros 

set backspace=eol,start,indent
set whichwrap+=<,>,h,l
set ignorecase smartcase     " 搜索时忽略大小写             
"set nowrapscan              " 禁止在搜索到文件两端时重新搜索
set hlsearch
set incsearch
set magic
set showmatch
set matchtime=4
set noerrorbells	"设置Vim静音
set novisualbell
set t_vb=
set tm=500
set clipboard+=unnamed	" 将vim的默认缓冲挂到Windows的剪贴版上

"打开语法高亮:
if g:islinux
    if v:version<600
        if filereadable(expand("$VIM/syntax/syntax.vim"))
            syntax on
        endif
    else
        syntax on
    endif
else
    syntax on
endif

"设置字体  
"set guifont=dejaVu/ Sans/ MONO/ 10
 
"国际化设置
if has("multi_byte")
    set fileencodings=ucs-bom,utf-8,gbk,chinese,cp936,big5,euc-jp,euc-kr,latin1
    if v:lang =~ "^zh_CN"
        set encoding=utf-8
        set termencoding=utf-8
        set fileencoding=utf-8
	    source $VIMRUNTIME/delmenu.vim	"vim的菜单乱码解决：
	    source $VIMRUNTIME/menu.vim
	    language messages zh_CN.utf-8	"vim提示信息乱码的解决  
    elseif v:lang =~ "^zh_TW"
        set encoding=big5
	    set termencoding=big5
	    set fileencoding=big5
    elseif v:lang =~ "^ko"
	    set encoding=euc-kr
	    set termencoding=euc-kr
	    set fileencoding=euc-kr
    elseif v:lang =~ "^ja_JP"
	    set encoding=euc-jp
	    set termencoding=euc-jp
        set fileencoding=euc-jp
    endif
    "在必要的时候,使用utf-8替代CJK的设置
    if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
	    set encoding=utf-8
	    set termencoding=utf-8
	    set fileencoding=utf-8
    endif
endif
if exists("&ambiwidth")
    set ambiwidth=double
endif

if g:isGUI
    set guioptions-=m   " 关闭菜单栏
    set guioptions-=T   " 关闭工具栏
    set guioptions-=l   " 关闭左边滚动条
    set guioptions-=L   " 关闭垂直分隔窗口左边滚动条
    set guioptions-=r   " 关闭右边条
    set guioptions-=R   " 关闭垂直分隔窗口右边滚动条
 
    if g:iswindows
        if has("autocmd")
            autocmd GUIEnter * simalt ~x
        endif
    endif
    if v:version > 601
        colorscheme torte	"载入色彩方案
    endif
else
    if v:version > 601
        colorscheme torte
    endif
endif

set background=dark "改变对比度，比如使用暗色
 
"用 "cursorline" 高亮光标所在的屏幕行.用于方便定位光标.屏幕刷新会变慢激活可视模式时,为了容易看到选择的文本,不使用此高亮.
if g:isGUI
    if exists("&cursorline")
        set cursorline
		hi cursorline guibg=#222222  
		hi CursorColumn guibg=#333333
    endif
endif

set fileformats=dos,unix,mac
nmap <leader>fd :set ff=dos<cr>
nmap <leader>fu :set ff=unix<cr>
nmap <leader>fm :set fm=mac<cr>

"set backup "覆盖一个文件之前备份该文件,备份文件名由当前文件名加后辍"~"组成
"set backupdir=~/.vim_backup
set nobackup
set nowritebackup
set noswapfile

"Persistent undo
try
    if g:iswindows
      set undodir=C:\Windows\Temp
    else
      set undodir=~/.vim_runtime/undodir
    endif
    set undofile
catch
endtry

set expandtab	"使用空格来替换tab
set shiftwidth=4	"(自动) 缩进每一步使用的空白数目
set softtabstop=4
set tabstop=4
set smarttab
set lbr
set wrap                        " 换行

set tw=500
set autoindent
set smartindent
if has("cindent")
    set cindent
endif

set cinoptions=:N	" Make the 'case' in the same column with 'switch'

set shiftround                  " always round indents to multiple of shiftwidth
set copyindent                  " use existing indents for new indents
set preserveindent              " save as much indent structure as possible

map <leader>rot ggVGg?	"用 "rot13" 编码整个文件

"  In visual mode when you press * or # to search for the current selection
vnoremap <silent> * :call VisualSearch('f')<CR>
vnoremap <silent> # :call VisualSearch('b')<CR>

" When you press gv you vimgrep after the selected text
vnoremap <silent> gv :call VisualSearch('gv')<CR>
map <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>

function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

" From an idea by Michael Naumann
function! VisualSearch(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Smart mappings on the command line
cnoremap $h e ~/
cnoremap $d e ~/Desktop/
cnoremap $j e ./
cnoremap $c e <C-\>CurrentFileDir("e")<cr>

" $q is super useful when browsing on the command line
cnoremap $q <C-\>DeleteTillSlash()<cr>

func! Cwd()
  let cwd = getcwd()
  return "e " . cwd 
endfunc

func! DeleteTillSlash()
  let g:cmd = getcmdline()
  if g:islinux
    let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*", "\\1", "")
  else
    let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\]\\).*", "\\1", "")
  endif
  if g:cmd == g:cmd_edited
    if g:islinux
      let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*/", "\\1", "")
    else
      let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\\]\\).*\[\\\\\]", "\\1", "")
    endif
  endif
  return g:cmd_edited
endfunc

func! CurrentFileDir(cmd)
  return a:cmd . " " . expand("%:p:h") . "/"
endfunc


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

" Specify the behavior when switching between buffers 
try
  set switchbuf=usetab
  set stal=2
catch
endtry

"格式化状态栏
if performance_mode
else
    set laststatus=2
    set statusline=
    set statusline+=%2*%-3.3n%0*\   "缓冲器名
    set statusline+=%f\             "文件名
    set statusline+=%h%1*%m%r%w%0*  "标记符
    set statusline+=[
    if v:version >= 600
        set statusline+=%{strlen(&ft)?&ft:'none'},  "文件类型
        set statusline+=%{&encoding},               "编码类型
    endif
    set statusline+=%{&fileformat}]                 "文件格式
    if filereadable(expand("$VIM/vimfiles/plugin/vimbuddy.vim"))
        set statusline+=\ %{VimBuddy()}             "添加VimBuddy插件
        "这个插件会在状态栏上加一个笑脸,鼻子会随着光标移动而改变
    endif
    set statusline+=%=                              "左右对齐的分割点
    set statusline+=%F\                             "文件的完整路径
    set statusline+=%2*0x%-8B\                      "16进制表示当前字符
    set statusline+=%-14.(%l,%c%V%)\ %<(%P-%L)           "偏移量
 
    " special statusbar for special windows
    if has("autocmd")
        autocmd FileType qf
                    \ if &buftype == "quickfix" |
                    \ setlocal statusline=%2*%-3.3n%0* |
                    \ setlocal statusline+=\ \[Compiler\ Messages\] |
                    \ setlocal statusline+=%=%2*\ %<%P |
                    \ endif
 
        fun! FixMiniBufExplorerTitle()
            if "-MiniBufExplorer-" == bufname("%")
                setlocal statusline=%2*%-3.3n%0*
                setlocal statusline+=\[Buffers\]
                setlocal statusline+=%=%2*\ %<%P
            endif
        endfun
 
        if v:version>=600
            autocmd BufWinEnter *
                        \ let oldwinnr=winnr() |
                        \ windo call FixMiniBufExplorerTitle() |
                        \ exec oldwinnr . " wincmd w"
        endif
    endif
    if has('title') && (g:isGUI || &title)
        set titlestring=
        set titlestring+=%f\                "文件名
        set titlestring+=%h%m%r%w           "标记符
        set titlestring+=\ -\ %{v:progname} "程序名
    endif
endif

function! CurDir()
    let curdir = substitute(getcwd(), '/Users/amir/', "~/", "g")
    return curdir
endfunction

function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    else
        return ''
    endif
endfunction

iab xdate <c-r>=strftime("20%y-%m-%d %H:%M:%S")<cr>

"Comment for C like language
if has("autocmd")
    autocmd BufNewFile,BufRead *.js,*.htc,*.c,*.tmpl,*.css ino $c /**<cr> **/<esc>O
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Delete trailing white space, useful for Python ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()

set guitablabel=%t


if exists("&foldenable")
    set foldenable
    "set foldmethod=indent
    set foldmethod=marker       " 设置语法折叠
    "set foldcolumn=4            " 设置折叠区域的宽度
    "set foldopen=all
    "set foldclose=all           " 设置为自动关闭折叠
endif

if exists("&foldlevel")
    set fdl=0
endif 


let g:bufExplorerDefaultHelp=0
let g:bufExplorerShowRelativePath=1
map <leader>o :BufExplorer<cr>


let g:miniBufExplModSelTarget = 1
let g:miniBufExplorerMoreThanOne = 2
let g:miniBufExplModSelTarget = 0
let g:miniBufExplUseSingleClick = 1
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplVSplit = 25
let g:miniBufExplSplitBelow=1
let g:bufExplorerSortBy = "name"
autocmd BufRead,BufNew :call UMiniBufExplorer
map <leader>u :TMiniBufExplorer<cr>

let MRU_Max_Entries = 400
map <leader>f :MRU<CR>

let g:CommandTMaxHeight = 15
set wildignore+=*.o,*.obj,.git,*.pyc
noremap <leader>j :CommandT<cr>
noremap <leader>y :CommandTFlush<cr>

if has("autocmd") && v:version>600
    autocmd BufRead,BufNew *.vim map <buffer> <leader><space> :w!<cr>:source %<cr>
endif

autocmd FileType css set omnifunc=csscomplete#CompleteCSS

" Vimscript
autocmd FileType vim setlocal expandtab shiftwidth=4 tabstop=8 softtabstop=4

" Shell
autocmd FileType sh setlocal expandtab shiftwidth=4 tabstop=8 softtabstop=4

" Lisp
autocmd Filetype lisp,scheme setlocal equalprg=~/.vim/bin/lispindent.lisp expandtab shiftwidth=2 tabstop=8 softtabstop=2

" Ruby
autocmd FileType ruby setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2

" PHP
autocmd FileType php setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4

" X?HTML & XML
autocmd FileType html,xhtml,xml setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2

" CSS
autocmd FileType css setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4

" JavaScript
" autocmd BufRead,BufNewFile *.json setfiletype javascript
autocmd FileType javascript setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
let javascript_enable_domhtmlcss=1

" Enable spell check for text files
"autocmd BufNewFile,BufRead *.txt setlocal spell spelllang=en

""""""""""""""""""""""""""""""
" => HTML related
""""""""""""""""""""""""""""""
" HTML entities - used by xml edit plugin
let xml_use_xhtml = 1
"let xml_no_auto_nesting = 1
 
"To HTML
let html_use_css = 0
let html_number_lines = 0
let use_xhtml = 1

""""""""""""""""""""""""""""""
" => Python section
""""""""""""""""""""""""""""""
let python_highlight_all = 1
au FileType python syn keyword pythonDecorator True None False self

au BufNewFile,BufRead *.jinja set syntax=htmljinja
au BufNewFile,BufRead *.mako set ft=mako

au FileType python inoremap <buffer> $r return
au FileType python inoremap <buffer> $i import
au FileType python inoremap <buffer> $p print
au FileType python inoremap <buffer> $f #--- PH ----------------------------------------------<esc>FP2xi
au FileType python map <buffer> <leader>1 /class
au FileType python map <buffer> <leader>2 /def
au FileType python map <buffer> <leader>C ?class
au FileType python map <buffer> <leader>D ?def

""""""""""""""""""""""""""""""
" => JavaScript section
"""""""""""""""""""""""""""""""
au FileType javascript call JavaScriptFold()
au FileType javascript setl fen
au FileType javascript setl nocindent

au FileType javascript imap <c-t> AJS.log();<esc>hi
au FileType javascript imap <c-a> alert();<esc>hi

au FileType javascript inoremap <buffer> $r return
au FileType javascript inoremap <buffer> $f //--- PH ----------------------------------------------<esc>FP2xi

function! JavaScriptFold()
    setl foldmethod=syntax
    setl foldlevelstart=1
    syn region foldBraces start=/{/ end=/}/ transparent fold keepend extend

    function! FoldText()
    return substitute(getline(v:foldstart), '{.*', '{...}', '')
    endfunction
    setl foldtext=FoldText()
endfunction

""""""""""""""""""""""""""""""
" => Vim grep
""""""""""""""""""""""""""""""
let Grep_Skip_Dirs = 'RCS CVS SCCS .svn generated'
set grepprg=/bin/grep\ -nH

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"NERDTree
map <F10> :NERDTreeToggle<cr>
"map <F4> :silent! NERDTree<CR> 

" taglist
map <F9> :silent! Tlist<cr>
let Tlist_Auto_Highlight_Tag = 1
let Tlist_Auto_Open = 0
let Tlist_Auto_Update = 1
let Tlist_Close_On_Select = 0
let Tlist_Compact_Format = 0
let Tlist_Ctags_Cmd = 'D:\vim\vim73\ctags.exe'
let Tlist_Display_Prototype = 0
let Tlist_Display_Tag_Scope = 1
let Tlist_Enable_Fold_Column = 0
"如果taglist窗口是最后一个窗口，则退出vim 
let Tlist_Exit_OnlyWindow = 1
let Tlist_File_Fold_Auto_Close = 0
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_Hightlight_Tag_On_BufEnter = 1
let Tlist_Inc_Winwidth = 0
let Tlist_Max_Submenu_Items = 1
let Tlist_Max_Tag_Length = 30
let Tlist_Process_File_Always = 0
let Tlist_Show_Menu = 0
"不同时显示多个文件的tag，只显示当前文件的
let Tlist_Show_One_File = 1
let Tlist_Sort_Type = "order"
let Tlist_Use_Horiz_Window = 0
"在右侧窗口中显示taglist窗口
let Tlist_Use_Right_Window = 1
let Tlist_WinWidth = 40
let tlist_php_settings = 'php;c:class;i:interfaces;d:constant;f:function'

" txtbrowser
autocmd BufNewFile,BufRead *.txt set ft=txt
